import csv
import os

##############To restart the measurements, exit the 'total gain graph' window and click restart button

from RsInstrument.RsInstrument import RsInstrument
from pipython import GCSDevice, pitools
import tkinter as tk
import numpy as np
import math
import matplotlib.pyplot as plt
from datetime import date
import serial
import BFN_lib

from tkinter import *


restart_window = None
instr = None


try:
    instr = RsInstrument('TCPIP::169.254.202.203::INSTR', True, True)
    instr.visa_timeout = 10000
    instr.opc_timeout = 100000
    instr.instrument_status_checking = True
    instr.opc_query_after_write = True

except Exception as ex:
    print('Error initializing the instrument session:\n' + ex.args[0])
    exit()

verif_VNA='0'
VNA2='1'


# end program
def close_program():
    app.destroy()
    instr.close()
    gcs.close()

# restart window
def show_restart_window():
    global restart_window  # Access the global variable
    restart_window = tk.Toplevel()
    restart_window.title('Restart measurement')
    restart_window.geometry('300x200')
    label = tk.Label(restart_window, text='Restart measure?')
    label.pack(padx=10, pady=10)

    restart_button = tk.Button(restart_window, text='Restart', command=restart_app)
    restart_button.pack(padx=10, pady=10)

    no_button = tk.Button(restart_window, text='No', command=close_program)
    no_button.pack(padx=10, pady=10)


# configure VNA
def connect_VNA():
    print('=====================================')
    print('============= Connection to the VNA')
    print('=====================================')

    print('VNA Connected!')
    print(f'Driver Version: {instr.driver_version}')
    print(f'SpecAn IDN: {instr.idn_string}')
    print(f'visa_manufacturer: {instr.visa_manufacturer}')
    print(f'full_instrument_model_name: {instr.full_instrument_model_name}')
    print(f'instrument_serial_number: {instr.instrument_serial_number}')
    print(f'firmware_version: {instr.instrument_firmware_version}')
    print(f'instrument_options: List: {instr.instrument_options}')
    print(f'opc_timeout: {instr.opc_timeout}')
    print(f'visa_timeout: {instr.visa_timeout}')
    print(f'SpecAn Options: {",".join(instr.instrument_options)}')

    freq_start = float(frequence_start_entry.get())
    freq_stop = float(frequence_stop_entry.get())
    freq_points = float(frequence_points_entry.get())


    print('=====================================')
    print('============= Configuration of the VNA')
    print('=====================================')

    instr.clear_status()  # Clean all subsystem instrument errors
    instr.write_str('*RST')
    instr.write_str(f'FREQ:STARt {freq_start} GHZ')
    instr.write_str(f'FREQ:STOP {freq_stop} GHZ')
    # instr.write_str('FREQ:SPAN 100 MHz')
    instr.write_str('BAND 1 kHz')  # RBW
    instr.write_str('DISP:WIND:TRAC:Y:RLEV 0.0')  # Reference Level
    instr.write_str('SYSTEM:DISPLAY:UPDATE ON')

    print('\n VNA Configured !\n')
    verif_VNA=VNA2
    print('verif_VNA vaut '+verif_VNA+'\n')

    instr.write_str('DISPLAY:WINDOW1:TRACE1:DELETE')
    instr.write_str('SOURce1:PATH1:DIRectaccess B16')
    instr.write_str('SOURce1:PATH2:DIRectaccess B16')
    instr.write_str('DISP:WIND1:STAT ON')
    instr.write_str(f'SWE:POIN {freq_points}')  # Sweep points

    # ====== "Ch1Tr1" Configuration // probe 1
    instr.write_str('CALC1:PAR:SDEF "Ch1Tr1", "B2/A1D1"')  # Choose the ratio b2/a1 Port 1
    instr.write_str('CALC1:FORM  MLOGarithmic; :DISP:WIND1:TRAC2:FEED "Ch1Tr1"')

    # ===== "Ch1Tr2" Configuration // probe 2
    instr.write_str('CALC2:PAR:SDEF "Ch1Tr2","A2/A1D1"')  # Choose the ratio a2/a1 Port 1
    instr.write_str('CALC2:FORM  MLOGarithmic; :DISP:WIND1:TRAC3:FEED "Ch1Tr2"')

def restart_app():
    # Close the restart window
    restart_window.destroy()
    # Re-create the main app window
    app.deiconify()


# next, we configure all the buttons

#configure TX,RX and standby modes
def rx_mode():
    BFN_lib.rx_mode(correlator2)

def tx_mode():
    BFN_lib.tx_mode(correlator2)

def stand_mode():
    BFN_lib.standby_mode(correlator2)

#configure all the enable/disable ports + disable all the ports at once

[p_1,p_2,p_3,p_4,p_5,p_6,p_7,p_8]=[0,0,0,0,0,0,0,0]
liste_ports=[p_1,p_2,p_3,p_4,p_5,p_6,p_7,p_8]

def port_en_1():
    BFN_lib.enable_port(correlator2,1)
    liste_ports[0] = 1
    print(liste_ports)

def port_dis_1():
    BFN_lib.disable_port(correlator2,1)
    liste_ports[0]=0
    print(liste_ports)

def port_en_2():
    BFN_lib.enable_port(correlator2,2)
    liste_ports[1]=1
    print(liste_ports)

def port_dis_2():
    BFN_lib.disable_port(correlator2,2)
    liste_ports[1] = 0
    print(liste_ports)

def port_en_3():
    BFN_lib.enable_port(correlator2,3)
    liste_ports[2] = 1
    print(liste_ports)

def port_dis_3():
    BFN_lib.disable_port(correlator2,3)
    liste_ports[2] = 0
    print(liste_ports)

def port_en_4():
    BFN_lib.enable_port(correlator2,4)
    liste_ports[3] = 1
    print(liste_ports)

def port_dis_4():
    BFN_lib.disable_port(correlator2,4)
    liste_ports[3] = 0
    print(liste_ports)

def port_en_5():
    BFN_lib.enable_port(correlator2,5)
    liste_ports[4] = 1
    print(liste_ports)

def port_dis_5():
    BFN_lib.disable_port(correlator2,5)
    liste_ports[4] = 0
    print(liste_ports)

def port_en_6():
    BFN_lib.enable_port(correlator2,6)
    liste_ports[5] = 1
    print(liste_ports)

def port_dis_6():
    BFN_lib.disable_port(correlator2,6)
    liste_ports[5] = 0
    print(liste_ports)

def port_en_7():
    BFN_lib.enable_port(correlator2,7)
    liste_ports[6] = 1
    print(liste_ports)

def port_dis_7():
    BFN_lib.disable_port(correlator2,7)
    liste_ports[6] = 0
    print(liste_ports)

def port_en_8():
    BFN_lib.enable_port(correlator2,8)
    liste_ports[7] = 1
    print(liste_ports)

def port_dis_8():
    BFN_lib.disable_port(correlator2,8)
    liste_ports[7] = 0
    print(liste_ports)

def port_dis_all():
    BFN_lib.disable_all_port(correlator2)
    for i in range(0,8):
        liste_ports[i]=0
    print(liste_ports)

#it allows the use of the buttons
def en_dcdc():
    BFN_lib.enable_dcdc(correlator2)

#configure the attenuations/phases for each port + allows to turn back the attenuation and/or the phase at zero
def bouton_attenuation_1():
    att_value=int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,1,att_value)

def bouton_phase_1():
    phase_value=int(phase_entry.get())
    BFN_lib.phase(correlator2,1,phase_value)

def bouton_attenuation_2():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,2,att_value)

def bouton_phase_2():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,2,phase_value)

def bouton_attenuation_3():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,3,att_value)

def bouton_phase_3():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,3,phase_value)

def bouton_attenuation_4():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,4,att_value)

def bouton_phase_4():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,4,phase_value)

def bouton_attenuation_5():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,5,att_value)

def bouton_phase_5():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,5,phase_value)

def bouton_attenuation_6():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,6,att_value)

def bouton_phase_6():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,6,phase_value)

def bouton_attenuation_7():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,7,att_value)

def bouton_phase_7():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,7,phase_value)

def bouton_attenuation_8():
    att_value = int(attenuation_entry.get())
    BFN_lib.attenuation(correlator2,8,att_value)

def bouton_phase_8():
    phase_value = int(phase_entry.get())
    BFN_lib.phase(correlator2,8,phase_value)

def bouton_attenuation_zero():
    BFN_lib.attenuation_zero(correlator2)

def bouton_phase_zero():
    BFN_lib.phase_zero(correlator2)

#configure the moving of the motor to any angle ; turn back the motor to his home position
def bouton_nouvel_angle():
    gcs = GCSDevice('C-863.12')
    gcs_sn = "021550330"
    gcs.ConnectUSB(gcs_sn)
    angle_value = int(nouvel_angle_entry.get())
    gcs.MVR(1, angle_value)
    print("We move the motor at the angle " + str(angle_value))
    gcs.close()

def bouton_retour_origine():
    gcs = GCSDevice('C-863.12')
    gcs_sn = "021550330"
    gcs.ConnectUSB(gcs_sn)
    gcs.GOH()
    pitools.waitontarget(gcs, 1)
    gcs.MVR(1, float(angle_def_entry.get()))  # Move to default position
    print('We came back to the original position')
    gcs.close()


# function start_measurement
def start_measurement():
    #print(verif_VNA)
    #BFN_lib.delay_ms(500)
   # if verif_VNA != '1':
    #    print("il y a eu un probleme lors de la configuration du VNA\n")
    #    exit()
    global gcs
    connect_VNA()
    angle_min = float(angle_min_entry.get())
    angle_max = float(angle_max_entry.get())
    angle_step = float(angle_step_entry.get())
    freq_points = int(frequence_points_entry.get())
    offset = float(offset_entry.get())

    current_angle = angle_min
    indice = int(frequence_plot_entry.get())
    angle_default=float(angle_def_entry.get())

    #  Connection to the stepper motor controller
    gcs = GCSDevice('C-863.12')
    print("Connecting GCS")
    gcs_sn = "021550330"
    gcs.ConnectUSB(gcs_sn)
    print('GCS connected: {}'.format(gcs.qIDN().strip()))
    axis = 1

    #  Create a 1D array with the list of all the angle to take a measurement
    angles_list = np.arange(angle_min, angle_max + 1, angle_step)
    nb_points = len(angles_list)
    print("Total number of points:", nb_points)

    gcs.SVO(axis, 1)  # Set servo ON
    gcs.GOH()  # Go to the home position
    pitools.waitontarget(gcs, axis)
    print("Homing complete !")

    gcs.MOV(axis, angle_min)  # Begin measurement at angle_min position
    pitools.waitontarget(gcs, axis)
    print("Initial position Complete !")

    #  Create 2 multidimensional arrays to store the measurements data
    data_polar_1 = np.zeros((freq_points,len(angles_list) * 2))
    data_polar_2 = np.zeros((freq_points,len(angles_list) * 2))

    temp1_Re = np.zeros((freq_points,len(angles_list)))
    temp1_Im = np.zeros((freq_points,len(angles_list)))
    temp2_Re = np.zeros((freq_points, len(angles_list)))
    temp2_Im = np.zeros((freq_points, len(angles_list)))

    # Calculation
    # Create multidimensional arrays to store the results of the calculations for each measured port
    amplitude_polar_1 = np.zeros((freq_points,len(angles_list)))
    amplitude_polar_2 = np.zeros((freq_points,len(angles_list)))
    total_gain = np.zeros((freq_points,len(angles_list)))

    def autoscale_y(ax, margin=0.1):
        def get_bottom_top(line):
            xd = line.get_xdata()
            yd = line.get_ydata()
            lo, hi = ax.get_xlim()
            y_displayed = yd[((xd > lo) & (xd < hi))]
            h = np.max(y_displayed) - np.min(y_displayed)
            bot = np.min(y_displayed) - margin * h
            top = np.max(y_displayed) + margin * h
            return bot, top

        lines = ax.get_lines()
        bot, top = np.inf, -np.inf

        for line in lines:
            new_bot, new_top = get_bottom_top(line)
            if new_bot < bot: bot = new_bot
            if new_top > top: top = new_top

        ax.set_ylim(bot, top)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    zeros_y_axis = np.zeros((len(angles_list), 1))
    line1, = ax.plot(angles_list, zeros_y_axis, label='Total Gain', lw=1)
    line2, = ax.plot(angles_list, zeros_y_axis, label='Amplitude Polar 1', lw=1)
    line3, = ax.plot(angles_list, zeros_y_axis, label='Amplitude Polar 2', lw=1)
    fig.canvas.draw()
    fig.canvas.flush_events()
    plt.ylim((-10, 20))
    plt.title('Total Gain')
    plt.xlabel('Phi (degree)')
    plt.ylabel('Mag (dB)')
    plt.legend(loc='best')
    ## plt.grid()
    plt.draw()
    plt.ion()
    plt.show()

    for i in range(len(angles_list)):
        print("Measure...")

        # Trace 1
        instr.write_str(':CALCULATE1:PARAMETER:SELECT "Ch1Tr1"')
        temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH1DATA')

        for j in range(0,freq_points):
            temp1_Re[j][i] = temp[2*j]  # Re
            temp1_Im[j][i] = temp[2*j + 1]  # Im


        # Trace 2
        instr.write_str(':CALCULATE2:PARAMETER:SELECT "Ch1Tr2"')
        temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH2DATA')


	# Calculate Re and Im
	
        for j in range(0, freq_points):
            temp2_Re[j][i] = temp[2*j]  # Re
            temp2_Im[j][i] = temp[2*j + 1]  # Im

       

        for j in range(0, freq_points):
            amplitude_polar_1[j][i] = 10 * math.log10((temp1_Re[j][i] ** 2) + (temp1_Im[j][i] ** 2)) - offset
            amplitude_polar_2[j][i] = 10 * math.log10((temp2_Re[j][i] ** 2) + (temp2_Im[j][i] ** 2)) - offset
            total_gain[j][i] = 10 * math.log10(
                ((temp2_Re[j][i] ** 2 + temp1_Re[j][i] ** 2) + (temp2_Im[j][i] ** 2 + temp1_Im[j][i] ** 2))) - offset

        # # Plot graph gain in function of angles
        s1 = total_gain[indice][:]
        line1.set_ydata(s1)

        amplitude_polar_c1 = amplitude_polar_1[indice][:]
        line2.set_ydata(amplitude_polar_c1)

        amplitude_polar_c2 = amplitude_polar_2[indice][:]
        line3.set_ydata(amplitude_polar_c2)

        fig.canvas.draw()
        fig.canvas.flush_events()

        # Autoscale y-axis
        autoscale_y(ax)

        # Preparing for next measurement
        print(f'Changing angle {i}/{len(angles_list)}, {(i / len(angles_list) * 100):.0f} %')
        print(f'Angle is {current_angle}')
        gcs.MVR(axis, angle_step)  # Move to the next angle
        current_angle = current_angle + angle_step
        pitools.waitontarget(gcs, axis)

    BFN_lib.standby_mode(correlator2)

    print('Return to home')
    gcs.GOH()
    pitools.waitontarget(gcs, axis)

    print('Go to default position')
    gcs.MVR(axis, angle_default)  # Move to default position

    gcs.close()

    plt.ioff()
    plt.grid()
    plt.show()





    # Download results
  #  path = "measurements/thales/"
    date_test = date.today()
    formatted_date = date_test.strftime('%Y%m%d')
    path2 = "measurements/nouveauCSV/"
    filename2 = path2 + formatted_date + '_' + str(angle_min) + '_' + str(angle_max) + '_' + str(angle_step)
    np.savetxt(filename2 + '_DATA_polar_1' + '.csv', amplitude_polar_1[:], delimiter=';')
    np.savetxt(filename2 + '_DATA_polar_2' + '.csv', amplitude_polar_2[:], delimiter=';')
    np.savetxt(filename2 + '_DATA_Total_Gain' + '.csv', total_gain[:], delimiter=';')
    np.savetxt(filename2 + 'totalgain' + '.csv', total_gain[:], delimiter=';')
    np.savetxt(filename2 + '_DATA_angle_list.csv', angles_list, delimiter=';')
    np.savetxt(filename2 + '_temp.csv', temp, delimiter=';')
    path2_png = filename2 + '_plot.png'
    fig.savefig(path2_png)

    with open(filename2 + '_DATA_Total_Gain.csv', 'r', newline='') as zer:
        with open(filename2 + 'totalgain.csv', 'w', newline='') as zer2:
            myreader = csv.reader(zer, delimiter = ';')
            mywriter = csv.writer(zer2, delimiter = ';')
            for ligne in myreader:
                for i in range(len(ligne)):
                    mywriter.writerow([ligne[i]])
                    if (i+1)%31 == 0:
                        mywriter.writerow("\n")

    with open(filename2 + 'totalgain.csv', 'r', newline='') as zer:
        with open(filename2 + 'refgtfg.csv', 'w') as zer2:
            myreader = csv.reader(zer)
            mywriter = csv.writer(zer2)
            for ligne in myreader:
                mywriter.writerow(ligne[0])
            liste=[]
            for k in range(len(filename2 + 'totalgain.csv')):
                liste.append((filename2 + 'totalgain.csv')[k][0])
            print(liste)

    show_restart_window()



# function start_measurement_multi
def start_measurement_multi():
    #  print(verif_VNA)
    # BFN_lib.delay_ms(500)
    # if verif_VNA != '1':
    #   print("il y a eu un probleme lors de la configuration du VNA")
    #  exit()

    print('\n')
    print(liste_ports)

    global gcs
    connect_VNA()   #connect vna if not already done
    angle_min = float(angle_min_entry.get())
    angle_max = float(angle_max_entry.get())
    angle_step = float(angle_step_entry.get())
    freq_points = int(frequence_points_entry.get())
    offset = float(offset_entry.get())
    current_angle = angle_min
    indice = int(frequence_plot_entry.get())
    angle_default=float(angle_def_entry.get())

    #  Connection to the stepper motor controller
    gcs = GCSDevice('C-863.12')
    print("Connecting GCS")
    gcs_sn = "021550330"
    gcs.ConnectUSB(gcs_sn)
    print('GCS connected: {}'.format(gcs.qIDN().strip()))
    axis = 1

    bfn_list = [1, 2, 3, 4, 5, 6, 7, 8]  # Output ports of the BFN


    #  Create a 1D array with the list of all the angle to take a measurement
    angles_list = np.arange(angle_min, angle_max + 1, angle_step)
    nb_points = len(angles_list)
    print("Total number of points:", nb_points)

    gcs.SVO(axis, 1)  # Set servo ON
    gcs.GOH()  # Go to the home position
    pitools.waitontarget(gcs, axis)
    print("Homing complete !")

    BFN_lib.enable_power(correlator2)
    BFN_lib.delay_ms(50)  # Wait a bit before the measurement begin

    BFN_lib.tx_mode(correlator2)
    BFN_lib.delay_ms(50)  # Wait a bit before the measurement begin

    BFN_lib.delay_ms(50)  # Wait a bit before the measurement begin
    BFN_lib.disable_all_port(correlator2)

    gcs.MOV(axis, angle_min)  # Begin measurement at angle_min position
    pitools.waitontarget(gcs, axis)
    print("Initial position Complete !")

    #  Create 2 multidimensional arrays to store the measurements data
    data_polar_1 = np.zeros((len(bfn_list), len(angles_list) * 2))
    data_polar_2 = np.zeros((len(bfn_list), len(angles_list) * 2))

        # Calculation
    # Create multidimensional arrays to store the results of the calculations for each measured port
    amplitude_polar_1 = np.zeros((len(bfn_list),freq_points, len(angles_list)))
    amplitude_polar_2 = np.zeros((len(bfn_list),freq_points, len(angles_list)))
    total_gain = np.zeros((len(bfn_list),freq_points, len(angles_list)))

    def autoscale_y(ax, margin=0.1):
        def get_bottom_top(line):
            xd = line.get_xdata()
            yd = line.get_ydata()
            lo, hi = ax.get_xlim()
            y_displayed = yd[((xd > lo) & (xd < hi))]
            h = np.max(y_displayed) - np.min(y_displayed)
            bot = np.min(y_displayed) - margin * h
            top = np.max(y_displayed) + margin * h
            return bot, top

        lines = ax.get_lines()
        bot, top = np.inf, -np.inf

        for line in lines:
            new_bot, new_top = get_bottom_top(line)
            if new_bot < bot: bot = new_bot
            if new_top > top: top = new_top

        ax.set_ylim(bot, top)

    fig = plt.figure()
    ax = fig.add_subplot(111)
    zeros_y_axis = np.zeros((len(angles_list), 1))
    line1, = ax.plot(angles_list, zeros_y_axis, label='Ant 1', lw=1)
    line2, = ax.plot(angles_list, zeros_y_axis, label='Ant 2', lw=1)
    line3, = ax.plot(angles_list, zeros_y_axis, label='Ant 3', lw=1)
    line4, = ax.plot(angles_list, zeros_y_axis, label='Ant 4', lw=1)
    line5, = ax.plot(angles_list, zeros_y_axis, label='Ant 5', lw=1)
    line6, = ax.plot(angles_list, zeros_y_axis, label='Ant 6', lw=1)
    line7, = ax.plot(angles_list, zeros_y_axis, label='Ant 7', lw=1)
    line8, = ax.plot(angles_list, zeros_y_axis, label='Ant 8', lw=1)
    fig.canvas.draw()
    fig.canvas.flush_events()
    plt.ylim((-10, 20))
    plt.title('Total Gain')
    plt.xlabel('Phi (degree)')
    plt.ylabel('Mag (dB)')
    plt.legend(loc='best')
    #plt.grid()
    plt.draw()
    plt.ion()
    plt.show()

    temp1_Re = np.zeros((len(bfn_list),freq_points,len(angles_list)))
    temp1_Im = np.zeros((len(bfn_list),freq_points,len(angles_list)))
    temp2_Re = np.zeros((len(bfn_list),freq_points, len(angles_list)))
    temp2_Im = np.zeros((len(bfn_list),freq_points, len(angles_list)))

    for i in range(len(angles_list)):
        print("Measure...")

        for j in bfn_list:
            BFN_lib.disable_port(correlator2,j-1)
            BFN_lib.delay_ms(100)  # Wait a bit before the measurement begin
            BFN_lib.enable_port(correlator2, j)
            BFN_lib.delay_ms(100)  # Wait a bit before the measurement begin
            # Trace 1
            instr.write_str(':CALCULATE1:PARAMETER:SELECT "Ch1Tr1"')
            temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH1DATA')

            for k in range(0,freq_points):
                temp1_Re[j - 1][k][i] = temp[2*k]  # Re
                temp1_Im[j - 1][k][i] = temp[2*k + 1]  # Im

            # Trace 2
            instr.write_str(':CALCULATE2:PARAMETER:SELECT "Ch1Tr2"')
            temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH2DATA')

            for k in range(0,freq_points):
                temp2_Re[j - 1][k][i] = temp[2*k]  # Re
                temp2_Im[j - 1][k][i] = temp[2*k + 1]  # Im

          

            for k in range(0, freq_points):
                amplitude_polar_1[j-1][k][i] = 0
                amplitude_polar_1[j - 1][k][i]= 10 * math.log10((temp1_Re[j-1][k][i] ** 2) + (temp1_Im[j-1][k][i] ** 2)) - offset
                amplitude_polar_2[j-1][k][i] = 10 * math.log10((temp2_Re[j-1][k][i] ** 2) + (temp2_Im[j-1][k][i] ** 2)) - offset
                total_gain[j-1][k][i] = 10 * math.log10(
                ((temp2_Re[j-1][k][i] ** 2 + temp1_Re[j-1][k][i] ** 2) + (temp2_Im[j-1][k][i] ** 2 + temp1_Im[j-1][k][i] ** 2))) - offset

        BFN_lib.disable_all_port(correlator2)

        # # Plot graph gain in function of angles
        s1 = total_gain[0][indice][:]
        line1.set_ydata(s1)

        s2 = total_gain[1][indice][:]
        line2.set_ydata(s2)

        s3 = total_gain[2][indice][:]
        line3.set_ydata(s3)

        s4 = total_gain[3][indice][:]
        line4.set_ydata(s4)

        s5 = total_gain[4][indice][:]
        line5.set_ydata(s5)

        s6 = total_gain[5][indice][:]
        line6.set_ydata(s6)

        s7 = total_gain[6][indice][:]
        line7.set_ydata(s7)

        s8 = total_gain[7][indice][:]
        line8.set_ydata(s8)


        fig.canvas.draw()
        fig.canvas.flush_events()

        # Autoscale y-axis
        autoscale_y(ax)

        # Preparing for next measurement
        print(f'Changing angle {i}/{len(angles_list)}, {(i / len(angles_list) * 100):.0f} %')
        print(f'Angle is {current_angle}')
        gcs.MVR(axis, angle_step)  # Move to the next angle
        current_angle = current_angle + angle_step
        pitools.waitontarget(gcs, axis)

    BFN_lib.standby_mode(correlator2)

    print(total_gain[:])
    print('\n')
    print('\n')
    print(total_gain[:][1])

    print('Return to home')
    gcs.GOH()
    pitools.waitontarget(gcs, axis)

    print('Go to default position')
    gcs.MVR(axis, angle_default)  # Move to default position

    gcs.close()

    plt.ioff()
    plt.grid()
    plt.show()

    # Download results
    path = "measurements/thales/"
    date_test = date.today()
    formatted_date = date_test.strftime('%Y%m%d')
    filename = path + formatted_date + '_' + str(angle_min) + '_' + str(angle_max) + '_' + str(angle_step)
    path_png = filename + '_plot.png'
    fig.savefig(path_png)
    np.savetxt(filename + '_DATA_polar_1' + '.csv', amplitude_polar_1[:][0][0], delimiter=';')
    np.savetxt(filename + '_DATA_polar_2' + '.csv', amplitude_polar_2[:][0][0], delimiter=';')
    np.savetxt(filename + '_DATA_polar_1_autreport' + '.csv', amplitude_polar_1[:][1][0], delimiter=';')
    np.savetxt(filename + '_DATA_polar_2_autreport' + '.csv', amplitude_polar_2[:][1][0], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain' + '.csv', total_gain[:][0][0], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_autreport1' + '.csv', total_gain[:][1][1], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_tout1' + '.csv', total_gain[:][1], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_autreport2' + '.csv', total_gain[1][:][2], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_autreport3' + '.csv', total_gain[1][:][4], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_autreport4' + '.csv', total_gain[1][:][5], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain_autreport5' + '.csv', total_gain[1][:][6], delimiter=';')
    #np.savetxt(filename + '_DATA_Total_Gain_autreport6' + '.csv', total_gain[1][:][7], delimiter=';')
    np.savetxt(filename + '_DATA_angle_list.csv', angles_list, delimiter=';')
    np.savetxt(filename + '_temp.csv', temp, delimiter=';')

    #for i in range(1,7):
    for i in range(1, 6):
        if liste_ports[i] == 0:
            os.remove(filename + '_DATA_Total_Gain_autreport'+str(i) + '.csv')

    show_restart_window()



# function start_measurement_phase
def start_measurement_phase():
    #  print(verif_VNA)
    # BFN_lib.delay_ms(500)
    # if verif_VNA != '1':
    #   print("il y a eu un probleme lors de la configuration du VNA")
    #  exit()
    global gcs
    connect_VNA()   #connect vna if not already done
    angle_min = float(angle_min_entry.get())
    angle_max = float(angle_max_entry.get())
    angle_step = float(angle_step_entry.get())
    freq_points = int(frequence_points_entry.get())
    offset = float(offset_entry.get())
    current_angle = angle_min
    indice = int(frequence_plot_entry.get())
    angle_default=float(angle_def_entry.get())

    #  Connection to the stepper motor controller
    gcs = GCSDevice('C-863.12')
    print("Connecting GCS")
    gcs_sn = "021550330"
    gcs.ConnectUSB(gcs_sn)
    print('GCS connected: {}'.format(gcs.qIDN().strip()))
    axis = 1

    bfn_phase_list = [i for i in range(64)]  # Output ports of the BFN


    #  Create a 1D array with the list of all the angle to take a measurement
    angles_list=[angle_min]
    nb_points = len(angles_list)
    print("Total number of points:", nb_points)

    gcs.SVO(axis, 1)  # Set servo ON
    gcs.GOH()  # Go to the home position
    pitools.waitontarget(gcs, axis)
    print("Homing complete !")

    BFN_lib.enable_power(correlator2)
    BFN_lib.delay_ms(50)  # Wait a bit before the measurement begin

    BFN_lib.tx_mode(correlator2)
    BFN_lib.delay_ms(50)  # Wait a bit before the measurement begin

    gcs.MOV(axis, angle_min)  # Begin measurement at angle_min position
    pitools.waitontarget(gcs, axis)
    print("Initial position Complete !")

    #  Create 2 multidimensional arrays to store the measurements data
    data_polar_1 = np.zeros((len(bfn_phase_list), len(angles_list) * 2))
    data_polar_2 = np.zeros((len(bfn_phase_list), len(angles_list) * 2))

        # Calculation
    # Create multidimensional arrays to store the results of the calculations for each measured port
    amplitude_polar_1 = np.zeros((len(bfn_phase_list),freq_points, len(angles_list)))
    amplitude_polar_2 = np.zeros((len(bfn_phase_list),freq_points, len(angles_list)))
    total_gain = np.zeros((len(bfn_phase_list),freq_points, len(angles_list)))

    fig = plt.figure()
    ax = fig.add_subplot(111)
    zeros_y_axis = np.zeros((len(bfn_phase_list), 1))
    line1, = ax.plot(5.625*np.array(bfn_phase_list), zeros_y_axis, label='Ant 1', lw=1)
    fig.canvas.draw()
    fig.canvas.flush_events()
    plt.ylim((-50, 50))
    plt.title('Total Gain')
    plt.xlabel('Phase (degree)')
    plt.ylabel('Mag (dB)')
    plt.legend(loc='best')
    #plt.grid()
    plt.draw()
    plt.ion()
    plt.show()

    temp1_Re = np.zeros((len(bfn_phase_list),freq_points,len(angles_list)))
    temp1_Im = np.zeros((len(bfn_phase_list),freq_points,len(angles_list)))
    temp2_Re = np.zeros((len(bfn_phase_list),freq_points, len(angles_list)))
    temp2_Im = np.zeros((len(bfn_phase_list),freq_points, len(angles_list)))

    for i in range(len(angles_list)):
        print("Measure...")

        for j in bfn_phase_list:
            BFN_lib.phase(correlator2,5,j)
            BFN_lib.delay_ms(100)  # Wait a bit before the measurement begin

            # Trace 1
            instr.write_str(':CALCULATE1:PARAMETER:SELECT "Ch1Tr1"')
            temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH1DATA')

            for k in range(0,freq_points):
                temp1_Re[j][k][i] = temp[2*k]  # Re
                temp1_Im[j][k][i] = temp[2*k + 1]  # Im

            # Trace 2
            instr.write_str(':CALCULATE2:PARAMETER:SELECT "Ch1Tr2"')
            temp = instr.query_bin_or_ascii_float_list('FORM ASCII; :TRAC? CH2DATA')

            for k in range(0,freq_points):
                temp2_Re[j][k][i] = temp[2*k]  # Re
                temp2_Im[j][k][i] = temp[2*k + 1]  # Im


            for k in range(0, freq_points):
                amplitude_polar_1[j][k][i] = 0
                amplitude_polar_1[j][k][i]= 10 * math.log10((temp1_Re[j][k][i] ** 2) + (temp1_Im[j][k][i] ** 2)) - offset
                amplitude_polar_2[j][k][i] = 10 * math.log10((temp2_Re[j][k][i] ** 2) + (temp2_Im[j][k][i] ** 2)) - offset
                total_gain[j][k][i] = 10 * math.log10(
                ((temp2_Re[j][k][i] ** 2 + temp1_Re[j][k][i] ** 2) + (temp2_Im[j][k][i] ** 2 + temp1_Im[j][k][i] ** 2))) - offset
                print(str(total_gain[j][k][i]))

        # # Plot graph gain in function of angles

        s1 = total_gain[:,indice,0]
        print("updated total_gain: " + str(total_gain))
        print("updated s1: " + str(s1))

        line1.set_ydata(s1)


        fig.canvas.draw()
        fig.canvas.flush_events()

        # Autoscale y-axis
        #autoscale_y(ax)

        # Preparing for next measurement
        print(f'Changing angle {i}/{len(angles_list)}, {(i / len(angles_list) * 100):.0f} %')
        print(f'Angle is {current_angle}')
        gcs.MVR(axis, angle_step)  # Move to the next angle
        current_angle = current_angle + angle_step
        pitools.waitontarget(gcs, axis)

    BFN_lib.standby_mode(correlator2)

    print('Return to home')
    gcs.GOH()
    pitools.waitontarget(gcs, axis)

    print('Go to default position')
    gcs.MVR(axis, angle_default)  # Move to default position

    gcs.close()

    plt.ioff()
    plt.grid()
    plt.show()

    # Download results
    path = "measurements/thales/"
    date_test = date.today()
    formatted_date = date_test.strftime('%Y%m%d')
    filename = path + formatted_date + '_' + str(angle_min) + '_' + str(angle_max) + '_' + str(angle_step)
    np.savetxt(filename + '_DATA_polar_1' + '.csv', amplitude_polar_1[:][0][0], delimiter=';')
    np.savetxt(filename + '_DATA_polar_2' + '.csv', amplitude_polar_2[:], delimiter=';')
    np.savetxt(filename + '_DATA_Total_Gain' + '.csv', total_gain[:], delimiter=';')
    np.savetxt(filename + '_DATA_angle_list.csv', angles_list, delimiter=';')
    np.savetxt(filename + '_temp.csv', temp, delimiter=';')
    path_png = filename + '_plot.png'
    fig.savefig(path_png)

    show_restart_window()



#
# next, we configure the visual of the interface
#
app = tk.Tk()
app.title("Mesure d'antenne GUI")
app.geometry('1000x680')

#  Connection to the correlator2
print("Connecting BFN")
correlator2 = serial.Serial('COM13', 100000)
print("BFN connected !")

# CONFIG VNA
# verif_VNA='0'
left_frame_middle = tk.Frame(app, height=170, width=100, bg='light grey')
left_frame_middle.grid(row=0, column=0, pady=10, padx=10)

frequence_start_label = tk.Label(left_frame_middle, text='Frequence start (GHz)')
frequence_start_label.grid(row=1, column=0, pady=5, padx=5)
frequence_start_entry = tk.Entry(left_frame_middle)
frequence_start_entry.insert(index=0, string="27")  # default value
frequence_start_entry.grid(row=1, column=1, pady=5, padx=5)

frequence_stop_label = tk.Label(left_frame_middle, text='Frequence stop (GHz)')
frequence_stop_label.grid(row=2, column=0, pady=5, padx=5)
frequence_stop_entry = tk.Entry(left_frame_middle)
frequence_stop_entry.insert(index=0, string="30")  # default value
frequence_stop_entry.grid(row=2, column=1, pady=5, padx=5)

frequence_points_label = tk.Label(left_frame_middle, text='Frequence points')
frequence_points_label.grid(row=3, column=0, pady=5, padx=5)
frequence_points_entry = tk.Entry(left_frame_middle)
frequence_points_entry.insert(index=0, string="7")  # default value
frequence_points_entry.grid(row=3, column=1, pady=5, padx=5)

frequence_plot_label = tk.Label(left_frame_middle, text='Indice_plot')
frequence_plot_label.grid(row=3, column=2, pady=5, padx=5)
frequence_plot_entry = tk.Entry(left_frame_middle)
frequence_plot_entry.insert(index=0, string="5")  # default value
frequence_plot_entry.grid(row=3, column=3, pady=5, padx=5)


configure_vna = tk.Button(left_frame_middle, text='Configure VNA', command=connect_VNA)
configure_vna.grid(row=2, column=3, pady=5, padx=5)

attenuation_label = tk.Label(left_frame_middle, text='Attenuation')
attenuation_label.grid(row=4, column=0, pady=5, padx=5)
attenuation_entry = tk.Entry(left_frame_middle)
attenuation_entry.insert(index=0, string="00")  # default value
attenuation_entry.grid(row=4, column=1, pady=5, padx=5)

phase_label = tk.Label(left_frame_middle, text='Phase')
phase_label.grid(row=4, column=2, pady=5, padx=5)
phase_entry = tk.Entry(left_frame_middle)
phase_entry.insert(index=0, string="00")  # default value
phase_entry.grid(row=4, column=3, pady=5, padx=5)

bfn_attenuation_button_1 = tk.Button(left_frame_middle, text='Attenuation_1', command=bouton_attenuation_1)
bfn_attenuation_button_1.grid(row=5, column=0, pady=5, padx=5)

bfn_phase_button_1 = tk.Button(left_frame_middle, text='Phase_1', command=bouton_phase_1)
bfn_phase_button_1.grid(row=6, column=0, pady=5, padx=5)

bfn_attenuation_button_2 = tk.Button(left_frame_middle, text='Attenuation_2', command=bouton_attenuation_2)
bfn_attenuation_button_2.grid(row=5, column=1, pady=5, padx=5)

bfn_phase_button_2 = tk.Button(left_frame_middle, text='Phase_2', command=bouton_phase_2)
bfn_phase_button_2.grid(row=6, column=1, pady=5, padx=5)

bfn_attenuation_button_3 = tk.Button(left_frame_middle, text='Attenuation_3', command=bouton_attenuation_3)
bfn_attenuation_button_3.grid(row=5, column=2, pady=5, padx=5)

bfn_phase_button_3 = tk.Button(left_frame_middle, text='Phase_3', command=bouton_phase_3)
bfn_phase_button_3.grid(row=6, column=2, pady=5, padx=5)

bfn_attenuation_button_4 = tk.Button(left_frame_middle, text='Attenuation_4', command=bouton_attenuation_4)
bfn_attenuation_button_4.grid(row=5, column=3, pady=5, padx=5)

bfn_phase_button_4 = tk.Button(left_frame_middle, text='Phase_4', command=bouton_phase_4)
bfn_phase_button_4.grid(row=6, column=3, pady=5, padx=5)

bfn_attenuation_button_5 = tk.Button(left_frame_middle, text='Attenuation_5', command=bouton_attenuation_5)
bfn_attenuation_button_5.grid(row=5, column=4, pady=5, padx=5)

bfn_phase_button_5 = tk.Button(left_frame_middle, text='Phase_5', command=bouton_phase_5)
bfn_phase_button_5.grid(row=6, column=4, pady=5, padx=5)

bfn_attenuation_button_6 = tk.Button(left_frame_middle, text='Attenuation_6', command=bouton_attenuation_6)
bfn_attenuation_button_6.grid(row=5, column=5, pady=5, padx=5)

bfn_phase_button_6 = tk.Button(left_frame_middle, text='Phase_6', command=bouton_phase_6)
bfn_phase_button_6.grid(row=6, column=5, pady=5, padx=5)

bfn_attenuation_button_7 = tk.Button(left_frame_middle, text='Attenuation_7', command=bouton_attenuation_7)
bfn_attenuation_button_7.grid(row=5, column=6, pady=5, padx=5)

bfn_phase_button_7 = tk.Button(left_frame_middle, text='Phase_7', command=bouton_phase_7)
bfn_phase_button_7.grid(row=6, column=6, pady=5, padx=5)

bfn_attenuation_button_8 = tk.Button(left_frame_middle, text='Attenuation_8', command=bouton_attenuation_8)
bfn_attenuation_button_8.grid(row=5, column=7, pady=5, padx=5)

bfn_phase_button_8 = tk.Button(left_frame_middle, text='Phase_8', command=bouton_phase_8)
bfn_phase_button_8.grid(row=6, column=7, pady=5, padx=5)


bfn_attenuation_button_0 = tk.Button(left_frame_middle, text='Attenuation_0', command=bouton_attenuation_zero)
bfn_attenuation_button_0.grid(row=4, column=4, pady=5, padx=5)

bfn_phase_button_0 = tk.Button(left_frame_middle, text='Phase_0', command=bouton_phase_zero)
bfn_phase_button_0.grid(row=4, column=5, pady=5, padx=5)


nouvel_angle_label = tk.Label(left_frame_middle, text='New angle :')
nouvel_angle_label.grid(row=3, column=4, pady=5, padx=5)
nouvel_angle_entry = tk.Entry(left_frame_middle)
nouvel_angle_entry.insert(index=0, string="00")  # default value
nouvel_angle_entry.grid(row=3, column=5, pady=5, padx=5)
bfn_nouvel_angle = tk.Button(left_frame_middle, text='=> Change the angle', command=bouton_nouvel_angle)
bfn_nouvel_angle.grid(row=3, column=6, pady=5, padx=5)

bfn_retour_origine = tk.Button(left_frame_middle, text='Return original position', command=bouton_retour_origine)
bfn_retour_origine.grid(row=4, column=6, pady=5, padx=5)


# MESURE
right_frame_top = tk.Frame(app, height=170, width=100, bg='light grey')
right_frame_top.grid(row=3, column=0, pady=10, padx=10)

angle_min_label = tk.Label(right_frame_top, text='Angle min (deg)')
angle_min_label.grid(row=1, column=0, pady=5, padx=5)
angle_min_entry = tk.Entry(right_frame_top)
angle_min_entry.insert(index=0, string="-15")  # default value
angle_min_entry.grid(row=1, column=1, pady=5, padx=5)

angle_max_label = tk.Label(right_frame_top, text='Angle max (deg)')
angle_max_label.grid(row=2, column=0, pady=5, padx=5)
angle_max_entry = tk.Entry(right_frame_top)
angle_max_entry.insert(index=0, string="15")  # default value
angle_max_entry.grid(row=2, column=1, pady=5, padx=5)

angle_step_label = tk.Label(right_frame_top, text='Angle step')
angle_step_label.grid(row=3, column=0, pady=5, padx=5)
angle_step_entry = tk.Entry(right_frame_top)
angle_step_entry.insert(index=0, string="1")  # default value
angle_step_entry.grid(row=3, column=1, pady=5, padx=5)

offset_label = tk.Label(right_frame_top, text='Offset')
offset_label.grid(row=4, column=0, pady=5, padx=5)
offset_entry = tk.Entry(right_frame_top)
offset_entry.insert(index=0, string="-40")  # default value
offset_entry.grid(row=4, column=1, pady=5, padx=5)

angle_def_label = tk.Label(right_frame_top, text='Angle default (deg)')
angle_def_label.grid(row=5, column=0, pady=5, padx=5)
angle_def_entry = tk.Entry(right_frame_top)
angle_def_entry.insert(index=0, string="0")  # default value
angle_def_entry.grid(row=5, column=1, pady=5, padx=5)

measure_button = tk.Button(right_frame_top, text='Start measure Multi', command=start_measurement_multi)
measure_button.grid(row=6, column=1, pady=5, padx=5)

measure_button = tk.Button(right_frame_top, text='Start measure', command=start_measurement)
measure_button.grid(row=6, column=0, pady=5, padx=5)

# BFN
left_frame_top = tk.Frame(app, height=100, width=100, bg='light grey')
left_frame_top.grid(row=6, column=0, pady=10, padx=10)

bfn_dcdc_button = tk.Button(left_frame_top, text='dcdc enable', command=en_dcdc)
bfn_dcdc_button.grid(row=1, column=0, pady=5, padx=5)

bfn_stand_button = tk.Button(left_frame_top, text='Standby mode', command=stand_mode)
bfn_stand_button.grid(row=1, column=1, pady=5, padx=5)

bfn_rx_button = tk.Button(left_frame_top, text='Rx mode', command=rx_mode)
bfn_rx_button.grid(row=1, column=2, pady=5, padx=5)

bfn_tx_button = tk.Button(left_frame_top, text='Tx mode', command=tx_mode)
bfn_tx_button.grid(row=1, column=3, pady=5, padx=5)

bfn_disable_button = tk.Button(left_frame_top, text='Disable ports', command=port_dis_all)
bfn_disable_button.grid(row=1, column=4, pady=20, padx=5)

bfn_enable1_button = tk.Button(left_frame_top, text='Port 1 enable', command=port_en_1,bg='green')
bfn_enable1_button.grid(row=2, column=0, pady=5, padx=5)

bfn_disable1_button = tk.Button(left_frame_top, text='Port 1 disable', command=port_dis_1,bg='red')
bfn_disable1_button.grid(row=4, column=0, pady=5, padx=5)

bfn_enable2_button = tk.Button(left_frame_top, text='Port 2 enable', command=port_en_2,bg='green')
bfn_enable2_button.grid(row=2, column=1, pady=5, padx=5)

bfn_disable2_button = tk.Button(left_frame_top, text='Port 2 disable', command=port_dis_2,bg='red')
bfn_disable2_button.grid(row=4, column=1, pady=5, padx=5)

bfn_enable3_button = tk.Button(left_frame_top, text='Port 3 enable', command=port_en_3,bg='green')
bfn_enable3_button.grid(row=2, column=2, pady=5, padx=5)

bfn_disable3_button = tk.Button(left_frame_top, text='Port 3 disable', command=port_dis_3,bg='red')
bfn_disable3_button.grid(row=4, column=2, pady=5, padx=5)

bfn_enable4_button = tk.Button(left_frame_top, text='Port 4 enable', command=port_en_4,bg='green')
bfn_enable4_button.grid(row=2, column=3, pady=5, padx=5)

bfn_disable4_button = tk.Button(left_frame_top, text='Port 4 disable', command=port_dis_4,bg='red')
bfn_disable4_button.grid(row=4, column=3, pady=5, padx=5)

bfn_enable5_button = tk.Button(left_frame_top, text='Port 5 enable', command=port_en_5,bg='green')
bfn_enable5_button.grid(row=3, column=0, pady=5, padx=5)

bfn_disable5_button = tk.Button(left_frame_top, text='Port 5 disable', command=port_dis_5,bg='red')
bfn_disable5_button.grid(row=5, column=0, pady=5, padx=5)

bfn_enable6_button = tk.Button(left_frame_top, text='Port 6 enable', command=port_en_6,bg='green')
bfn_enable6_button.grid(row=3, column=1, pady=5, padx=5)

bfn_disable6_button = tk.Button(left_frame_top, text='Port 6 disable', command=port_dis_6,bg='red')
bfn_disable6_button.grid(row=5, column=1, pady=5, padx=5)

bfn_enable7_button = tk.Button(left_frame_top, text='Port 7 enable', command=port_en_7,bg='green')
bfn_enable7_button.grid(row=3, column=2, pady=5, padx=5)

bfn_disable7_button = tk.Button(left_frame_top, text='Port 7 disable', command=port_dis_7,bg='red')
bfn_disable7_button.grid(row=5, column=2, pady=5, padx=5)

bfn_enable8_button = tk.Button(left_frame_top, text='Port 8 enable', command=port_en_8,bg='green')
bfn_enable8_button.grid(row=3, column=3, pady=5, padx=5)

bfn_disable8_button = tk.Button(left_frame_top, text='Port 8 disable', command=port_dis_8,bg='red')
bfn_disable8_button.grid(row=5, column=3, pady=5, padx=5)

bfn_test_phase = tk.Button(left_frame_top, text='Test of phase', command=start_measurement_phase)
bfn_test_phase.grid(row=3, column=4, pady=5, padx=5)


close_button = tk.Button(app, text='Close', command=close_program)
close_button.place(relx=1.0, rely=1.0, anchor='se', bordermode='outside', x=-10, y=-10)



app.mainloop()
